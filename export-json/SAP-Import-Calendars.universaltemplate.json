{
    "agent": null,
    "agentCluster": null,
    "agentClusterVar": null,
    "agentFieldsRestriction": "No Restriction",
    "agentType": "Any",
    "agentVar": null,
    "automaticOutputRetrievalFieldsRestriction": "No Restriction",
    "broadcastCluster": null,
    "broadcastClusterVar": null,
    "createConsole": false,
    "credentialFieldsRestriction": "No Restriction",
    "credentials": null,
    "credentialsVar": null,
    "description": "v2.24",
    "desktopInteract": false,
    "elevateUser": false,
    "environment": [],
    "environmentVariablesFieldsRestriction": "No Restriction",
    "exitCodeOutput": null,
    "exitCodeProcessing": "Success Exitcode Range",
    "exitCodeProcessingFieldsRestriction": "No Restriction",
    "exitCodeText": null,
    "exitCodes": "0",
    "fields": [
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "ashost",
                    "fieldValueLabel": "Application Server Connection",
                    "sequence": 0,
                    "sysId": "69f5a84d6cde48c7b13d2e9a028e1763",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "dest",
                    "fieldValueLabel": "SAPNWRFC.INI Connection",
                    "sequence": 1,
                    "sysId": "cea12f569e624955aef99cb7c6e56a4f",
                    "useFieldValueForLabel": false
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 4",
            "fieldType": "Choice",
            "fieldValue": "ashost",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "SAP Connection Type",
            "name": "connection_type",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 0,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "cde7beae1a3348e68e1d0a1995ddbbdb"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 2",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Destination",
            "name": "dest",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 1,
            "showIfField": "Choice Field 4",
            "showIfFieldValue": "dest",
            "sysId": "c7890f4529904527b24ec714505f1922"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 3",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "SAP Application Server IP or Hostname",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "ASHOST",
            "name": "ashost",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 3,
            "showIfField": "Choice Field 4",
            "showIfFieldValue": "ashost",
            "sysId": "d2caadbc88ba46338e3f5f989a046f73"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": 3,
            "fieldMapping": "Text Field 4",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "SAP ID - 3 Characters e.g. NPL",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "SID",
            "name": "sid",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 4,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "032ba4c411d94ed397204c1b7226a407"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 5",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "SAP Client e.g. 100",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Client",
            "name": "client",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 5,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "249c846be58c4d14af80e061f762b734"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 1",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "SAP Credentials",
            "name": "sapcred",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 6,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "e085fcde9c1441ccb41ca6ed3f8d94d2"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 11",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "SAP System Number - 2 digits e.g. 00",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "SAP SysNr",
            "name": "sysnr",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 13,
            "showIfField": "Choice Field 4",
            "showIfFieldValue": "ashost",
            "sysId": "f16375b450444a39b6c1acf925d74bbf"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "No",
                    "sequence": 0,
                    "sysId": "f5dfeafc8d5445718b8c07c06ecad0e5",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "Yes",
                    "sequence": 1,
                    "sysId": "7b54e84bc6ec4e358926bec1d80fac15",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 3",
            "fieldType": "Choice",
            "fieldValue": "No",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Choose \"Yes\" to import all Calendar",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Import all Calendar",
            "name": "importall",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 15,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "aff54cdd435f478d90705c79930f9e8d"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Script Field 1",
            "fieldType": "Script",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "factory_calendar_id,holiday_calendar_id e.g. 01,08",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Calendar Input File",
            "name": "script",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 16,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "No",
            "sysId": "587886d2decd42c29f8750a77ba27c5a"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 7",
            "fieldType": "Text",
            "fieldValue": "en",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "SAP language e.g. EN",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Language",
            "name": "lang",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 17,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "4ead899f1b454948937687280afdcf9c"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 8",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "number of years to import (eg. 1, 2, 3, 4, 5)",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Years",
            "name": "years",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 18,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "bff0fb1e16a54560afc866f6928c7a49"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 13",
            "fieldType": "Text",
            "fieldValue": "${_date('yyyy')}",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "year to import (eg. 2019) - the default value {_date('yyyy')} will always insert the current year",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Start Year",
            "name": "start_year",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 19,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "0a66416b388a4fa5bd4bf5e0a0f8df02"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 3",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "universal Controller Credentials for the REST API",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Universal Controller Credentials",
            "name": "uccred",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 20,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "3c6fbc7e664b44cd99b7446a7825a311"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 14",
            "fieldType": "Text",
            "fieldValue": "http://127.0.0.1:8080/opswise",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "base url for uc rest api calls",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Universal Controller URL",
            "name": "base_url",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 21,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "26d46b5b74ce4c239e32871bd045fd92"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "info",
                    "sequence": 0,
                    "sysId": "7fd2420527e940a6850deb28da9c0d41",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "trace",
                    "sequence": 1,
                    "sysId": "a7e0e9f4b4434b4c9ddfe9759526f218",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "audit",
                    "sequence": 2,
                    "sysId": "6705e3aa6fd9496692e48e1e17903f41",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "warn",
                    "sequence": 3,
                    "sysId": "098adefbca8b438ea81e2ee70107e9fb",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "error",
                    "sequence": 4,
                    "sysId": "ece9b13834204e82b6322ababfec83e7",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 2",
            "fieldType": "Choice",
            "fieldValue": "info",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Loglevel of the usap -level trace|audit|info|warn|error",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "USAP Loglevel",
            "name": "level",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 22,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "0ac56abec3bf45f08f9fa79f3611f2ae"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "INFO",
                    "sequence": 0,
                    "sysId": "f60a5bb81cb04719bec438c1d7876d4d",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "DEBUG",
                    "sequence": 1,
                    "sysId": "4e879855f9ea49c7a2164c5eaeda9e2f",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "WARNING",
                    "sequence": 2,
                    "sysId": "cbc859ad6cfa41fe88fc94c7b7143333",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ERROR",
                    "sequence": 3,
                    "sysId": "dce9b7e678664304a3e784a345119d6d",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 1",
            "fieldType": "Choice",
            "fieldValue": "INFO",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Loglevel",
            "name": "loglevel",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 23,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "5703f51e357d4c9691b91865d70f9fd8"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "Monday",
                    "fieldValueLabel": "Monday",
                    "sequence": 0,
                    "sysId": "0673e7548a1342ddb55e67d22e4365ef",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "Tuesday",
                    "sequence": 1,
                    "sysId": "fff22e9f3f82498da18738a6ae3fb8b7",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "Wednesday",
                    "sequence": 2,
                    "sysId": "b6b4471f08874416978c71ddab6aa18f",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "Thursday",
                    "sequence": 3,
                    "sysId": "e7876ace67364fd2aa26cbf21983e9a7",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "Friday",
                    "sequence": 4,
                    "sysId": "cf334f12ffbe447e8a4c3c5b987fe902",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "Saturday",
                    "sequence": 5,
                    "sysId": "2a890ac9ff794f26b80b3b7afd2826b2",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "Sunday",
                    "sequence": 6,
                    "sysId": "618e69578e38419c8b7608bcd9cf6281",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 5",
            "fieldType": "Choice",
            "fieldValue": "Monday",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "First day of the week",
            "name": "firstdayofweek",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 24,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "b71507f6c81947a98d01db6b5c58c0e1"
        }
    ],
    "name": "SAP-Import-Calendars",
    "outputFailureOnly": false,
    "outputReturnFile": null,
    "outputReturnNline": "100",
    "outputReturnSline": "1",
    "outputReturnText": null,
    "outputReturnType": "NONE",
    "outputType": "STDOUT",
    "runtimeDir": null,
    "script": null,
    "scriptTypeWindows": "uapy",
    "scriptUnix": "#!/opt/universal/python3.6/bin/python3\n# -*- coding: latin-1 -*-\n# --\n#      Origins: Stonebranch\n#       Author: Abdullah Saglam, Nils Buer\n#         Date: 14-SEPT-2018\n#\n#    Requires Universal Agent for Linux\n#\n#    Copyright (c) Stonebranch, 2018.  All rights reserved.\n#\n# Purpose: import SAP calendar to UC using a CVS file or all calendar\n# Steps:\n#   1. extract each factory and holiday calendar from SAP to a file using USAP\n#   2. reading each export file and create a Calendar with custom days for each\n#   sap factory calendar\n#   3. sap calendar working days are created as custom days of type business day\n#   4. sap calendar non working days are created as custom days of type holiday\n#   5. No Calendar Versioing is done, because SAP is the Master for the calendar\n#\n#   Version History:\n#   0.9   NBU   13-SEPT-2018      Created Script\n#   1.0   NBU   17-SEPT-2018      version support\n#   1.1   NBU   21-SEPT-2018      bug fixed\n#   1.2   NBU   30-OCT-2018       Import all Calendar added\n#   1.3   NBU   28.March-2019\n#   1.4   NBU   28.March-2019     debug info added\n#   1.5   NBU   03.04.2019        print all calendar\n#   1.6   NBU   04.04.2019        encoding added\n#   1.7   NBU   05.04.2019        replacing umlaute\n#   1.8   NBU   05.04.2019        strip\n#   2.0   ASA   16.05.2019        import via python function\n#   2.1   NBU   16.05.2019        removd CTK fields, cleanup function, sap_lang\n#   2.2   ASA   16.05.2019        cleanup\n#   2.3   ASA   06.08.2019        homag installation\n#   2.4   ASA   08.08.2019        improvements\n#   2.5   ASA   15.08.2019        improvements\n#   2.6   ASA   25.06.2020        check for empty calendar ids\n#   2.7   ASA   25.06.2020        small changes for logging\n#   2.8   ASA   29.06.2020        updated print variables\n#   2.9   NBU   03.11.2020        not used variable removed, notes correct for nwrcf\n#   2.10  NBU,ASA 03.11.2020      performance updates\n#   2.11  NBU,ASA 03.11.2020      performance updates\n#   2.12  NBU   03.11.2020        ops_var_sapnwrfcdir dir removed\n#   2.13  NBU   05.11.2020        bugfix\n#   2.14  ASA   05.11.2020        outputs processed on the fly\n#   2.15  ASA   05.11.2020        outputs processed on the fly\n#   2.16  ASA   05.11.2020        outputs processed on the fly\n#   2.17  ASA   05.11.2020        outputs processed on the fly\n#   2.18  ASA   05.11.2020        outputs processed on the fly\n#   2.19  ASA   05.11.2020        outputs processed on the fly\n#   2.20  ASA   05.11.2020        firstdayofweek support\n#   2.21  NBU   11.01.2021        Varibale formatted_output_sap_hol_cal set\n#   2.23  ASA   13.01.2021        firstdayofweek support default value\n#   2.23  ASA   13.01.2021        cleanup\n#   2.24  ASA   13.01.2021        cleanup\n# --\n\nimport logging\nimport sys\nimport csv\nimport time\nimport datetime\nimport os\nimport shutil\nimport subprocess\nimport io\nimport unicodedata\nimport json\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\ngl_version = \"2.24\"\ngl_variable_prefix = \"var\"\n# gl_caldef_directory = os.path.join(r\"${ops_var_work_dir} \".strip(), \"caldef\")\n\n# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\n\nbase_url = '${ops_var_base_url}'.rstrip(\" /\")\nauthentication = ('${_credentialUser(\"${ops_var_uccred}\")}', '${_credentialPwd(\"${ops_var_uccred}\")}')\ngl_connection_type = '${ops_var_connection_type}'\ngl_first_day_of_week = '${ops_var_firstdayofweek}'\ngl_first_day_of_week = 'Monday' if 'firstdayofweek' in gl_first_day_of_week else gl_first_day_of_week\n\n# -- Main Logic Function\ndef main():\n    # create_directory_structure(gl_caldef_directory)\n    # clean_old_csv_export()  # remove old csv exports\n    if \"${ops_var_loglevel}\" == \"DEBUG\":\n        print_all_calendar_to_stdout()\n\n    # -- Import Required Modules, Setup Logging Format, Set Variables\n    # script_setup()\n    print_variables()\n    if \"${ops_var_importall}\" == \"Yes\":\n        import_all_calendar()\n    else:\n        read_csv()\n\n\ndef print_variables():\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Executing task version \" + gl_version + \" with the following \"\n                                                          \"parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    all_variables = r\"${_scope}\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\ndef create_directory_structure(directory_path):\n    try:\n        if not os.path.exists(directory_path):\n            os.mkdir(directory_path)\n            logging.info(\"Created the directory %s \" % directory_path)\n        else:\n            logging.debug(\"The directory %s already there, will not be re-created\" % directory_path)\n    except OSError as e:\n        logging.error(\"Creation of the directory %s failed: %s\" % (directory_path, e))\n\n\ndef script_setup():\n    logging.info(\"Settings \")\n    logging.info(r\"SAP Calendar export UT Version: \" + str(version))\n    logging.info(r\"USAP started with loglevel: ${ops_var_level} \")\n    logging.info(r\"Python loglevel: ${ops_var_loglevel} \")\n    # logging.info(r\"sapnwrfc.ini destination: ${ops_var_sapnwrfcdir} \")\n    logging.info(r\"SAP destination: ${ops_var_dest} \")\n    logging.info(r\"SAP ASHOST: ${ops_var_ashost} \")\n    logging.info(r\"SAP SID: ${ops_var_sid} \")\n    logging.info(r\"SAP Client: ${ops_var_client} \")\n    logging.info(r\"SAP User: ${_credentialUser(\"${ops_var_sapcred}\")} \")\n    logging.info(r\"SAP Password: ${_credentialPwd(\"${ops_var_sapcred}\")} \")\n    logging.info(r\"Exporting All Calendar?: ${ops_var_importall} \")\n    # logging.info(r\"Exporting calendar to dir: ${ops_var_sapout} \")\n    logging.info(r\"Start Year: ${ops_var_start_year} \")\n    logging.info(r\"Years: ${ops_var_years} \")\n\n    if \"${ops_var_importall}\" == \"Yes\":\n        import_all_calendar()\n    else:\n        read_csv()\n\n\n# def clean_old_csv_export():\n#     logging.debug(r\"in clean_old_csv_export\")\n#     logging.debug(r\"removing old cvs files in \")\n#     # dirpath=r'${ops_var_sapout} '.strip()\n#     for root, dirs, files in os.walk(gl_caldef_directory):\n#         for f in files:\n#             os.unlink(os.path.join(root, f))\n#         for d in dirs:\n#             shutil.rmtree(os.path.join(root, d))\n\n\ndef import_all_calendar():\n    logging.debug(r\"in import_all_calendar\")\n    # extract all calendars without details from sap and\n    # convert it into a python dict\n    # than extract for each calendar the factory and holiday calendar details\n\n    if gl_connection_type == \"dest\":\n        #  running Stonebranch SAP Connector USAP with\n        #  destination connection with sapnwrfc.ini\n        logging.info(\"using destination server connection \")\n        try:\n            process = subprocess.check_output(\n                ['usap', '-dest', '${ops_var_dest}', '-client',\n                 '${ops_var_client}', '-userid',\n                 '${_credentialUser(\"${ops_var_sapcred}\")}',\n                 '-pwd', '${_credentialPwd(\"${ops_var_sapcred}\")}',\n                 '-level', '${ops_var_level}', '-lang', 'english',\n                 '-D', 'calendars', '-calendartype', 'fact',\n                 '-calendarid', '%', '-details', 'no'])\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n    else:\n        # running Stonebranch SAP Connector USAP with\n        # sap connection from controller\n        logging.info(\"using application server connection \")\n        try:\n            process = subprocess.check_output(\n                ['usap', '-ashost', '${ops_var_ashost}', '-client',\n                 '${ops_var_client}', '-sysnr', '${ops_var_sysnr}',\n                 '-userid', '${_credentialUser(\"${ops_var_sapcred}\")}', '-pwd',\n                 '${_credentialPwd(\"${ops_var_sapcred}\")}', '-level',\n                 '${ops_var_level}', '-lang', 'english', '-D',\n                 'calendars', '-calendartype', 'fact',\n                 '-calendarid', '%', '-details', 'no'])\n            # logging.debug(f\"command: {process}\")\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n    out = process.decode(encoding='utf-8', errors='ignore')\n    logging.debug(\"all calendar start\")\n    logging.debug(out)\n    logging.debug(\"all calendar end\")\n    fieldnames = ['', 'ID', 'VJAH', 'BJAH', 'M', 'D', 'M', 'D', 'F',\n                  'S', 'S', 'F', 'HO', 'BASIS', 'A', 'CRUSR',\n                  'CRDAT', 'CRTIME', 'I', 'AKTV', 'AKTB', 'DESCRIPTION']\n    reader = csv.DictReader(out.split('\\n'),\n                            delimiter='|',\n                            fieldnames=fieldnames)\n    ## skip first 6 rows\n    next(reader)\n    next(reader)\n    next(reader)\n    next(reader)\n    next(reader)\n    next(reader)\n    line_count = 0\n    for row in reader:\n        # print('\\t'.join(row))\n        fact_calid = row[\"ID\"] if row[\"ID\"] else \"\"\n        hol_calid = row[\"HO\"] if row[\"HO\"] else \"\"\n        bjah = row[\"BJAH\"]\n        DESCRIPTION = row[\"DESCRIPTION\"]\n        logging.info(\n            \"Processing Calendar: {} with Factory Calendar ID {} and\"\n            \"Holiday Calendar {} and valid until {} \".format(\n                str(DESCRIPTION).strip(), fact_calid, hol_calid, bjah))\n        # logging.info(\"Factory Calendar ID {} and holiday calendar {}\n        # and valid until {} \".format(DESCRIPTION,fact_calid,hol_calid,bjah))\n        if bjah is not None:\n            year = time.strftime(\"%Y\")\n            if int(bjah) >= int(year):\n                output_sap_fact_cal, output_sap_hol_cal = export_calendar(fact_calid, hol_calid)\n                import_cal_and_custom_loop(fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal)\n                line_count += 1\n    logging.info(\"{} Calendar have been imported from SAP\".format(line_count))\n\n\ndef export_calendar(fact_calid, hol_calid):\n    logging.debug(r\"in export_calendar\")\n    logging.info(f\"Export Process from SAP started \")\n    logging.info(f\"Exporting Factory Calendar with ID: {fact_calid} \")\n    logging.info(f\"Exporting Holiday Calendar with ID: {hol_calid}\")\n\n    formatted_output_sap_hol_cal = \"\"\n\n    if gl_connection_type == \"dest\":\n        # running Stonebranch SAP Connector USAP with\n        # destination connection with sapnrfc.ini\n        logging.info(\"Using Destination server connection \")\n        if hol_calid.strip() == \"\":\n            logging.info(\"No holiday calendar provided \")\n        else:\n            cmd_hol_cal = \"\"\"usap -dest ${ops_var_dest} \"\"\"\\\n            \"\"\"-client ${ops_var_client} \"\"\"\\\n            \"\"\"-userid ${_credentialUser(\"${ops_var_sapcred}\")} \"\"\"\\\n            \"\"\"-pwd ${_credentialPwd(\"${ops_var_sapcred}\")} \"\"\"\\\n            \"\"\"-level ${ops_var_level} -saplang ${ops_var_lang} \"\"\"\\\n            f\"\"\"-D calendars -calendartype hol -calendarid {hol_calid} \"\"\"\\\n            \"\"\"-details yes\"\"\"\n            try:\n                process_output = subprocess.check_output(cmd_hol_cal, shell=True)\n            except subprocess.CalledProcessError as e:\n                print(e.output)\n                logging.error(\"Error Code: \" + str(e.returncode))\n                exit(1)\n            formatted_output_sap_hol_cal = process_output.decode(encoding='utf-8', errors='ignore')\n        cmd_fact_cal = \"\"\"usap -dest ${ops_var_dest} \"\"\"\\\n        \"\"\"-client ${ops_var_client} \"\"\"\\\n        \"\"\"-userid ${_credentialUser(\"${ops_var_sapcred}\")} \"\"\"\\\n        \"\"\"-pwd ${_credentialPwd(\"${ops_var_sapcred}\")} \"\"\"\\\n        \"\"\"-level ${ops_var_level} -saplang ${ops_var_lang} \"\"\"\\\n        \"\"\"-D calendars -calendartype fact \"\"\"\\\n        f\"\"\"-calendarid {fact_calid} -details yes\"\"\"\n        try:\n            process_output = subprocess.check_output(cmd_fact_cal, shell=True)\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n        formatted_output_sap_fact_cal = process_output.decode(encoding='utf-8', errors='ignore')\n    else:\n        # running Stonebranch SAP Connector USAP with sap connection from controller\n        logging.info(\"Using Application server connection \")\n        if hol_calid.strip() == \"\":\n            logging.debug(\"No holiday calendar provided \")\n        else:\n            logging.debug(\"holiday calendar provided\")\n            cmd_hol_cal = f\"\"\"usap -ashost ${ops_var_ashost} -client ${ops_var_client} -sysnr ${ops_var_sysnr} -userid ${_credentialUser(\"${ops_var_sapcred}\")} -pwd ${_credentialPwd(\"${ops_var_sapcred}\")} -level ${ops_var_level} -saplang ${ops_var_lang} -D calendars -calendartype hol -calendarid {hol_calid} -details yes\"\"\"\n            try:\n                process_output = subprocess.check_output(cmd_hol_cal, shell=True)\n            except subprocess.CalledProcessError as e:\n                print(e.output)\n                logging.error(\"Error Code: \" + str(e.returncode))\n                exit(1)\n            formatted_output_sap_hol_cal = process_output.decode(encoding='utf-8', errors='ignore')\n        cmd_fact_cal = f\"\"\"usap -ashost ${ops_var_ashost} -client ${ops_var_client} -sysnr ${ops_var_sysnr} -userid ${_credentialUser(\"${ops_var_sapcred}\")} -pwd ${_credentialPwd(\"${ops_var_sapcred}\")} -level ${ops_var_level} -saplang ${ops_var_lang} -D calendars -calendartype fact -calendarid {fact_calid} -details yes\"\"\"\n        try:\n            process_output = subprocess.check_output(cmd_fact_cal, shell=True)\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n        formatted_output_sap_fact_cal = process_output.decode(encoding='utf-8', errors='ignore')\n\n    logging.info(\"Export Process from SAP finished \")\n    return formatted_output_sap_fact_cal, formatted_output_sap_hol_cal\n\n\ndef read_csv():\n    logging.debug(r\"in read_csv\")\n    fieldnames = ['ID', 'HO']\n    reader = csv.DictReader(open(r\"${_scriptPath('${ops_var_script}')}\"), delimiter = ',', fieldnames = fieldnames)\n    ## skip first row\n    next(reader)\n    line_count = 0\n    for row in reader:\n        fact_calid = row[\"ID\"] if row[\"ID\"] else \"\"\n        hol_calid = row[\"HO\"] if row[\"HO\"] else \"\"\n        logging.info(\"Processing Factory Calendar ID {} and holiday calendar ID {} \".format(fact_calid, hol_calid))\n        output_sap_fact_cal, output_sap_hol_cal = export_calendar(fact_calid, hol_calid)\n        import_cal_and_custom_loop(fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal)\n        line_count += 1\n    logging.info(\"{} Calendar have been imported from SAP\".format(line_count))\n\n\ndef print_all_calendar_to_stdout():\n    logging.debug(r\"in import_all_calendar\")\n    # extract all calendars without details from sap and convert it into a python dict\n    # than extract for each calendar the factory and holiday calendar details\n\n    if gl_connection_type == \"dest\":\n        # running Stonebranch SAP Connector USAP with sap connection from controller\n        logging.info(\"using destination server connection \")\n        try:\n            process = subprocess.check_output(\n                ['usap', '-dest', '${ops_var_dest}', '-client',\n                 '${ops_var_client}', '-userid',\n                 '${_credentialUser(\"${ops_var_sapcred}\")}',\n                 '-pwd', '${_credentialPwd(\"${ops_var_sapcred}\")}',\n                 '-level', '${ops_var_level}', '-lang', 'english',\n                 '-D', 'calendars', '-calendartype', 'fact',\n                 '-calendarid', '%', '-details', 'no'])\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n    else:\n        #  running Stonebranch SAP Connector USAP with destination connection with sapnwrfc.ini\n        logging.info(\"using application server connection \")\n        try:\n            process = subprocess.check_output(\n                ['usap', '-ashost', '${ops_var_ashost}', '-client',\n                 '${ops_var_client}', '-sysnr', '${ops_var_sysnr}',\n                 '-userid', '${_credentialUser(\"${ops_var_sapcred}\")}', '-pwd',\n                 '${_credentialPwd(\"${ops_var_sapcred}\")}', '-level',\n                 '${ops_var_level}', '-lang', 'english', '-D',\n                 'calendars', '-calendartype', 'fact',\n                 '-calendarid', '%', '-details', 'no'])\n            logging.debug(f\"command: {process}\")\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n    out = process.decode(encoding='utf-8', errors='ignore')\n    print(\"############ all calendar start ###############\")\n    print(out)\n    print(\"############ all calendar end #################\")\n\n\ndef import_cal_and_custom_loop(fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal):\n    cal_name = \"${ops_var_sid}_${ops_var_client}_%s\" % (fact_calid)\n    delete_calendar_call(cal_name)\n\n    bus_description = \"\"\n    for str_row_bus in output_sap_fact_cal.split(\"\\n\"):\n        #logging.debug('xx2 row: %s' % str(row))\n        # str_row_bus = str(row.decode(encoding='unicode_escape', errors='ignore'))\n        if \"|\" + str(fact_calid) + \"|\" in str_row_bus and\\\n                (str_row_bus.count('|') == 22 and\n                 \"DESCR\" not in str_row_bus):\n            #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'\n            # % (str_row.count('|'), str_row))\n            bus_description = str_row_bus.split('|')[21].strip()\n            logging.debug('bus_description: %s' % bus_description)\n            break\n\n    cal_str = '{\"businessDays\": {\"useDefaultIfBlank\": false}, ' \\\n              '\"comments\": \"%s\", \"name\": \"%s\", \"customDays\": [], ' \\\n              '\"firstDayOfWeek\": \"%s\", ' \\\n              '\"retainSysIds\": false}' % (bus_description, cal_name, gl_first_day_of_week)\n    json_payload_cal = json.loads(cal_str)\n\n    if hol_calid.strip():\n        for i in range(${ops_var_years}):\n            create_cal_and_custom(json_payload_cal,\n                                  fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal, ${ops_var_start_year} + i)\n\n    logging.debug(json.dumps(json_payload_cal))\n    create_calendar_call(json_payload_cal)\n\n\ndef create_cal_and_custom(json_payload_cal, fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal, year):\n    logging.info('Create Calendar and Custom Day: fact<%s> hol<%s>' %\n                 (fact_calid, hol_calid))\n    hdescription = \"\"\n    for str_row in output_sap_hol_cal.split(\"\\n\"):\n        # logging.debug('xx11 row: %s' % str(row))\n        # str_row = str(row.decode(encoding='unicode_escape', errors='ignore'))\n        if \"|\" + str(hol_calid) + \"|\" in str_row and\\\n                (str_row.count('|') == 6 and\n                 \"DESCR\" not in str_row):\n            #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'\n            # % (str_row.count('|'), str_row))\n            hdescription = str_row.split('|')[5].strip()\n            logging.debug('hdescription: %s' % hdescription)\n            break\n\n    custom_hol_name = \"CustomDays%sHoliday${ops_var_sid}_${ops_var_client}_%s\" % (year, hol_calid)\n    custom_hol_str = '{\"comments\": \"%s\", \"ctype\": \"List of Dates\", \"category\": \"Holiday\", \"dateList\": [], \"name\": \"%s\", \"retainSysIds\": false}' % (hdescription, custom_hol_name)\n    json_payload_custom_hol = json.loads(custom_hol_str)\n\n    holiday_found = False\n    for str_row in output_sap_hol_cal.split(\"\\n\"):\n        # logging.debug('xx12 row: %s' % str(row))\n        if \"|\" + str(year) + \"|\" in str_row and (str_row.count('|') == 19):\n            #logging.debug('NUMBER OF PIPES1:%d xxx row: %s' %\n            # (str_row.count('|'), str_row))\n            fields = str_row.split('|')\n            i = 3\n            while i < 15:\n                for day in range(31):\n                    if fields[i][day] == \"0\":\n                        custom_hol_date = '{}-{:0>2}-{:0>2}'.format(\n                            str(year), str(i-2), str(day+1))\n                        logging.debug('HOL_DATE: ' + custom_hol_date)\n                        json_payload_custom_hol[\"dateList\"].append(custom_hol_date)\n                        holiday_found = True\n                i+=1\n            break\n    if holiday_found is True:\n        delete_custom_call(custom_hol_name)\n        logging.debug(json.dumps(json_payload_custom_hol))\n        create_custom_call(json_payload_custom_hol)\n\n    bus_description = \"\"\n    for str_row_bus in output_sap_fact_cal.split(\"\\n\"):\n        # logging.debug('xx23 row: %s' % str(row))\n        if \"|\" + str(fact_calid) + \"|\" in str_row_bus and (str_row_bus.count('|') == 22 and \"DESCR\" not in str_row_bus):\n            #logging.debug('NUMBER OF PIPES2:%d xxx row: %s' % (str_row.count('|'), str_row))\n            bus_description = str_row_bus.split('|')[21].strip()\n            logging.debug('bus_description: %s' % bus_description)\n            break\n\n    custom_bus_name = \"CustomDays%sBusinessday${ops_var_sid}_${ops_var_client}_%s\" % (year, fact_calid)\n    custom_bus_str = '{\"comments\": \"%s\", \"ctype\": \"List of Dates\", \"category\": \"Business Day\", \"dateList\": [], \"name\": \"%s\", \"retainSysIds\": false}' % (bus_description, custom_bus_name)\n    json_payload_custom_bus = json.loads(custom_bus_str)\n\n    business_day_found = False\n    for str_row_bus in output_sap_fact_cal.split(\"\\n\"):\n        # logging.debug('xx24 row: %s' % str(row))\n        if \"|\" + str(year) + \"|\" in str_row_bus and (str_row_bus.count('|') == 19):\n            #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'\n            # % (str_row.count('|'), str_row))\n            fields = str_row_bus.split('|')\n            i = 3\n            while i < 15:\n                for day in range(31):\n                    if fields[i][day] == \"1\":\n                        custom_bus_date = '{}-{:0>2}-{:0>2}'.format(str(year), str(i-2), str(day+1))\n                        logging.debug('BUS_DATE: ' + custom_bus_date)\n                        json_payload_custom_bus[\"dateList\"].append(custom_bus_date)\n                        business_day_found = True\n                i+=1\n            break\n\n    if business_day_found is True:\n        delete_custom_call(custom_bus_name)\n        logging.debug(json.dumps(json_payload_custom_bus))\n        create_custom_call(json_payload_custom_bus)\n\n    if business_day_found is True:\n        json_payload_cal[\"customDays\"].append({\"name\": '%s'% custom_bus_name})\n    if holiday_found is True:\n        json_payload_cal[\"customDays\"].append({\"name\": '%s'% custom_hol_name})\n\n\ndef create_custom_call(params):\n    url = '%s/resources/customday' % base_url\n    logging.info('Create Custom Day URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.post(url,\n                             headers=local_headers,\n                             data=json.dumps(params),\n                             auth=authentication,\n                             stream=True)\n\n    if 200 != response.status_code:\n        logging.debug('Response: %s' % response.text)\n        if \"duplicate\" in response.text:\n            logging.debug('This was added before, updating...')\n            sysId = read_custom_call(params[\"name\"])\n            params[\"sysId\"] = sysId\n            update_custom_call(params)\n        else:\n            exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef update_custom_call(params):\n    url = '%s/resources/customday' % base_url\n    logging.info('Update Custom Day URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    #logging.info(json.dumps(params))\n    response = requests.put(url,\n                            headers=local_headers,\n                            data=json.dumps(params),\n                            auth=authentication,\n                            stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        if \"duplicate\" in response.text:\n            logging.debug('This was updated before, passing...')\n        else:\n            exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef create_calendar_call(params):\n    url = '%s/resources/calendar' % base_url\n    logging.info('Create Calendar URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.post(url,\n                             headers=local_headers,\n                             data=json.dumps(params),\n                             auth=authentication,\n                             stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        if \"duplicate\" in response.text:\n            logging.debug('This was added before, updating...')\n            # for custom_day in params[\"customDays\"]:\n            #    add_custom_to_calendar_call(params[\"name\"], custom_day[\"name\"])\n            sys_id = read_calendar_call(params[\"name\"])\n            params[\"sysId\"] = sys_id\n            update_calendar_call(params)\n        else:\n            exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef update_calendar_call(params):\n    url = '%s/resources/calendar' % base_url\n    logging.info('Update Calendar URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.put(url,\n                            headers=local_headers,\n                            data=json.dumps(params),\n                            auth=authentication,\n                            stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        if \"duplicate\" in response.text:\n            logging.debug('This was added before, updating...')\n            for custom_day in params[\"customDays\"]:\n                add_custom_to_calendar_call(params[\"name\"], custom_day[\"name\"])\n        else:\n            exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef read_calendar_call(calendar_name):\n    url = '%s/resources/calendar?calendarname=%s' % (base_url, calendar_name)\n    logging.info('Read Calendar URL: %s' % url)\n    local_headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    sys_id = \"\"\n\n    response = requests.get(url,\n                            headers=local_headers,\n                            auth=authentication,\n                            stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        #exit(1)\n    else:\n        logging.debug('Response 200 received')\n        try:\n            sys_id = response.json()[\"sysId\"]\n        except ValueError as e:\n            logging.error(\"JSON parsing sysId, %s\" % response.text)\n            exit(1)\n\n    return sys_id\n\n\ndef delete_calendar_call(cal_name):\n    url = '%s/resources/calendar?calendarname=%s' % (base_url, cal_name)\n    logging.info('Delete Calendar URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.delete(url,\n                               headers=local_headers,\n                               auth=authentication,\n                               stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        #exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef delete_custom_call(custom_name):\n    url = '%s/resources/customday?customdayname=%s' % (base_url, custom_name)\n    logging.info('Delete Custom Day URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.delete(url,\n                               headers=local_headers,\n                               auth=authentication,\n                               stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        #exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef read_custom_call(custom_name):\n    url = '%s/resources/customday?customdayname=%s' % (base_url, custom_name)\n    logging.info('Read Custom Day URL: %s' % url)\n    local_headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    sys_id = \"\"\n\n    response = requests.get(url,\n                            headers=local_headers,\n                            auth=authentication,\n                            stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        #exit(1)\n    else:\n        logging.debug('Response 200 received')\n        try:\n            sys_id = response.json()[\"sysId\"]\n        except ValueError as e:\n            logging.error(\"JSON parsing sysId, %s\" % response.text)\n            exit(1)\n\n    return sys_id\n\n\ndef add_custom_to_calendar_call(cal_name, custom_name):\n    url = '%s/resources/calendar/customdays?calendarname=%s&customdayname=%s' % (base_url, cal_name, custom_name)\n    logging.info('Add Custom Day to Calendar URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.post(url,\n                             headers=local_headers,\n                             auth=authentication,\n                             stream=True)\n\n    if 200 != response.status_code:\n        logging.error('Response: %s' % response.text)\n        exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\n### Main\n# -- Execute\nmain()\n",
    "scriptWindows": "#!/opt/universal/python3.6/bin/python3\n# -*- coding: latin-1 -*-\n# --\n#      Origins: Stonebranch\n#       Author: Abdullah Saglam, Nils Buer\n#         Date: 14-SEPT-2018\n#\n#    Requires Universal Agent for Linux\n#\n#    Copyright (c) Stonebranch, 2018.  All rights reserved.\n#\n# Purpose: import SAP calendar to UC using a CVS file or all calendar\n# Steps:\n#   1. extract each factory and holiday calendar from SAP to a file using USAP\n#   2. reading each export file and create a Calendar with custom days for each\n#   sap factory calendar\n#   3. sap calendar working days are created as custom days of type business day\n#   4. sap calendar non working days are created as custom days of type holiday\n#   5. No Calendar Versioing is done, because SAP is the Master for the calendar\n#\n#   Version History:\n#   0.9   NBU   13-SEPT-2018      Created Script\n#   1.0   NBU   17-SEPT-2018      version support\n#   1.1   NBU   21-SEPT-2018      bug fixed\n#   1.2   NBU   30-OCT-2018       Import all Calendar added\n#   1.3   NBU   28.March-2019\n#   1.4   NBU   28.March-2019     debug info added\n#   1.5   NBU   03.04.2019        print all calendar\n#   1.6   NBU   04.04.2019        encoding added\n#   1.7   NBU   05.04.2019        replacing umlaute\n#   1.8   NBU   05.04.2019        strip\n#   2.0   ASA   16.05.2019        import via python function\n#   2.1   NBU   16.05.2019        removd CTK fields, cleanup function, sap_lang\n#   2.2   ASA   16.05.2019        cleanup\n#   2.3   ASA   06.08.2019        homag installation\n#   2.4   ASA   08.08.2019        improvements\n#   2.5   ASA   15.08.2019        improvements\n#   2.6   ASA   25.06.2020        check for empty calendar ids\n#   2.7   ASA   25.06.2020        small changes for logging\n#   2.8   ASA   29.06.2020        updated print variables\n#   2.9   NBU   03.11.2020        not used variable removed, notes correct for nwrcf\n#   2.10  NBU,ASA 03.11.2020      performance updates\n#   2.11  NBU,ASA 03.11.2020      performance updates\n#   2.12  NBU   03.11.2020        ops_var_sapnwrfcdir dir removed\n#   2.13  NBU   05.11.2020        bugfix\n#   2.14  ASA   05.11.2020        outputs processed on the fly\n#   2.15  ASA   05.11.2020        outputs processed on the fly\n#   2.16  ASA   05.11.2020        outputs processed on the fly\n#   2.17  ASA   05.11.2020        outputs processed on the fly\n#   2.18  ASA   05.11.2020        outputs processed on the fly\n#   2.19  ASA   05.11.2020        outputs processed on the fly\n#   2.20  ASA   05.11.2020        firstdayofweek support\n#   2.21  NBU   11.01.2021        Varibale formatted_output_sap_hol_cal set\n#   2.23  ASA   13.01.2021        firstdayofweek support default value\n#   2.23  ASA   13.01.2021        cleanup\n#   2.24  ASA   13.01.2021        cleanup\n# --\n\nimport logging\nimport sys\nimport csv\nimport time\nimport datetime\nimport os\nimport shutil\nimport subprocess\nimport io\nimport unicodedata\nimport json\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\ngl_version = \"2.24\"\ngl_variable_prefix = \"var\"\n# gl_caldef_directory = os.path.join(r\"${ops_var_work_dir} \".strip(), \"caldef\")\n\n# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\n\nbase_url = '${ops_var_base_url}'.rstrip(\" /\")\nauthentication = ('${_credentialUser(\"${ops_var_uccred}\")}', '${_credentialPwd(\"${ops_var_uccred}\")}')\ngl_connection_type = '${ops_var_connection_type}'\ngl_first_day_of_week = '${ops_var_firstdayofweek}'\ngl_first_day_of_week = 'Monday' if 'firstdayofweek' in gl_first_day_of_week else gl_first_day_of_week\n\n# -- Main Logic Function\ndef main():\n    # create_directory_structure(gl_caldef_directory)\n    # clean_old_csv_export()  # remove old csv exports\n    if \"${ops_var_loglevel}\" == \"DEBUG\":\n        print_all_calendar_to_stdout()\n\n    # -- Import Required Modules, Setup Logging Format, Set Variables\n    # script_setup()\n    print_variables()\n    if \"${ops_var_importall}\" == \"Yes\":\n        import_all_calendar()\n    else:\n        read_csv()\n\n\ndef print_variables():\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Executing task version \" + gl_version + \" with the following \"\n                                                          \"parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    all_variables = r\"${_scope}\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\ndef create_directory_structure(directory_path):\n    try:\n        if not os.path.exists(directory_path):\n            os.mkdir(directory_path)\n            logging.info(\"Created the directory %s \" % directory_path)\n        else:\n            logging.debug(\"The directory %s already there, will not be re-created\" % directory_path)\n    except OSError as e:\n        logging.error(\"Creation of the directory %s failed: %s\" % (directory_path, e))\n\n\ndef script_setup():\n    logging.info(\"Settings \")\n    logging.info(r\"SAP Calendar export UT Version: \" + str(version))\n    logging.info(r\"USAP started with loglevel: ${ops_var_level} \")\n    logging.info(r\"Python loglevel: ${ops_var_loglevel} \")\n    # logging.info(r\"sapnwrfc.ini destination: ${ops_var_sapnwrfcdir} \")\n    logging.info(r\"SAP destination: ${ops_var_dest} \")\n    logging.info(r\"SAP ASHOST: ${ops_var_ashost} \")\n    logging.info(r\"SAP SID: ${ops_var_sid} \")\n    logging.info(r\"SAP Client: ${ops_var_client} \")\n    logging.info(r\"SAP User: ${_credentialUser(\"${ops_var_sapcred}\")} \")\n    logging.info(r\"SAP Password: ${_credentialPwd(\"${ops_var_sapcred}\")} \")\n    logging.info(r\"Exporting All Calendar?: ${ops_var_importall} \")\n    # logging.info(r\"Exporting calendar to dir: ${ops_var_sapout} \")\n    logging.info(r\"Start Year: ${ops_var_start_year} \")\n    logging.info(r\"Years: ${ops_var_years} \")\n\n    if \"${ops_var_importall}\" == \"Yes\":\n        import_all_calendar()\n    else:\n        read_csv()\n\n\n# def clean_old_csv_export():\n#     logging.debug(r\"in clean_old_csv_export\")\n#     logging.debug(r\"removing old cvs files in \")\n#     # dirpath=r'${ops_var_sapout} '.strip()\n#     for root, dirs, files in os.walk(gl_caldef_directory):\n#         for f in files:\n#             os.unlink(os.path.join(root, f))\n#         for d in dirs:\n#             shutil.rmtree(os.path.join(root, d))\n\n\ndef import_all_calendar():\n    logging.debug(r\"in import_all_calendar\")\n    # extract all calendars without details from sap and\n    # convert it into a python dict\n    # than extract for each calendar the factory and holiday calendar details\n\n    if gl_connection_type == \"dest\":\n        #  running Stonebranch SAP Connector USAP with\n        #  destination connection with sapnwrfc.ini\n        logging.info(\"using destination server connection \")\n        try:\n            process = subprocess.check_output(\n                ['usap', '-dest', '${ops_var_dest}', '-client',\n                 '${ops_var_client}', '-userid',\n                 '${_credentialUser(\"${ops_var_sapcred}\")}',\n                 '-pwd', '${_credentialPwd(\"${ops_var_sapcred}\")}',\n                 '-level', '${ops_var_level}', '-lang', 'english',\n                 '-D', 'calendars', '-calendartype', 'fact',\n                 '-calendarid', '%', '-details', 'no'])\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n    else:\n        # running Stonebranch SAP Connector USAP with\n        # sap connection from controller\n        logging.info(\"using application server connection \")\n        try:\n            process = subprocess.check_output(\n                ['usap', '-ashost', '${ops_var_ashost}', '-client',\n                 '${ops_var_client}', '-sysnr', '${ops_var_sysnr}',\n                 '-userid', '${_credentialUser(\"${ops_var_sapcred}\")}', '-pwd',\n                 '${_credentialPwd(\"${ops_var_sapcred}\")}', '-level',\n                 '${ops_var_level}', '-lang', 'english', '-D',\n                 'calendars', '-calendartype', 'fact',\n                 '-calendarid', '%', '-details', 'no'])\n            # logging.debug(f\"command: {process}\")\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n    out = process.decode(encoding='utf-8', errors='ignore')\n    logging.debug(\"all calendar start\")\n    logging.debug(out)\n    logging.debug(\"all calendar end\")\n    fieldnames = ['', 'ID', 'VJAH', 'BJAH', 'M', 'D', 'M', 'D', 'F',\n                  'S', 'S', 'F', 'HO', 'BASIS', 'A', 'CRUSR',\n                  'CRDAT', 'CRTIME', 'I', 'AKTV', 'AKTB', 'DESCRIPTION']\n    reader = csv.DictReader(out.split('\\n'),\n                            delimiter='|',\n                            fieldnames=fieldnames)\n    ## skip first 6 rows\n    next(reader)\n    next(reader)\n    next(reader)\n    next(reader)\n    next(reader)\n    next(reader)\n    line_count = 0\n    for row in reader:\n        # print('\\t'.join(row))\n        fact_calid = row[\"ID\"] if row[\"ID\"] else \"\"\n        hol_calid = row[\"HO\"] if row[\"HO\"] else \"\"\n        bjah = row[\"BJAH\"]\n        DESCRIPTION = row[\"DESCRIPTION\"]\n        logging.info(\n            \"Processing Calendar: {} with Factory Calendar ID {} and\"\n            \"Holiday Calendar {} and valid until {} \".format(\n                str(DESCRIPTION).strip(), fact_calid, hol_calid, bjah))\n        # logging.info(\"Factory Calendar ID {} and holiday calendar {}\n        # and valid until {} \".format(DESCRIPTION,fact_calid,hol_calid,bjah))\n        if bjah is not None:\n            year = time.strftime(\"%Y\")\n            if int(bjah) >= int(year):\n                output_sap_fact_cal, output_sap_hol_cal = export_calendar(fact_calid, hol_calid)\n                import_cal_and_custom_loop(fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal)\n                line_count += 1\n    logging.info(\"{} Calendar have been imported from SAP\".format(line_count))\n\n\ndef export_calendar(fact_calid, hol_calid):\n    logging.debug(r\"in export_calendar\")\n    logging.info(f\"Export Process from SAP started \")\n    logging.info(f\"Exporting Factory Calendar with ID: {fact_calid} \")\n    logging.info(f\"Exporting Holiday Calendar with ID: {hol_calid}\")\n\n    formatted_output_sap_hol_cal = \"\"\n\n    if gl_connection_type == \"dest\":\n        # running Stonebranch SAP Connector USAP with\n        # destination connection with sapnrfc.ini\n        logging.info(\"Using Destination server connection \")\n        if hol_calid.strip() == \"\":\n            logging.info(\"No holiday calendar provided \")\n        else:\n            cmd_hol_cal = \"\"\"usap -dest ${ops_var_dest} \"\"\"\\\n            \"\"\"-client ${ops_var_client} \"\"\"\\\n            \"\"\"-userid ${_credentialUser(\"${ops_var_sapcred}\")} \"\"\"\\\n            \"\"\"-pwd ${_credentialPwd(\"${ops_var_sapcred}\")} \"\"\"\\\n            \"\"\"-level ${ops_var_level} -saplang ${ops_var_lang} \"\"\"\\\n            f\"\"\"-D calendars -calendartype hol -calendarid {hol_calid} \"\"\"\\\n            \"\"\"-details yes\"\"\"\n            try:\n                process_output = subprocess.check_output(cmd_hol_cal, shell=True)\n            except subprocess.CalledProcessError as e:\n                print(e.output)\n                logging.error(\"Error Code: \" + str(e.returncode))\n                exit(1)\n            formatted_output_sap_hol_cal = process_output.decode(encoding='utf-8', errors='ignore')\n        cmd_fact_cal = \"\"\"usap -dest ${ops_var_dest} \"\"\"\\\n        \"\"\"-client ${ops_var_client} \"\"\"\\\n        \"\"\"-userid ${_credentialUser(\"${ops_var_sapcred}\")} \"\"\"\\\n        \"\"\"-pwd ${_credentialPwd(\"${ops_var_sapcred}\")} \"\"\"\\\n        \"\"\"-level ${ops_var_level} -saplang ${ops_var_lang} \"\"\"\\\n        \"\"\"-D calendars -calendartype fact \"\"\"\\\n        f\"\"\"-calendarid {fact_calid} -details yes\"\"\"\n        try:\n            process_output = subprocess.check_output(cmd_fact_cal, shell=True)\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n        formatted_output_sap_fact_cal = process_output.decode(encoding='utf-8', errors='ignore')\n    else:\n        # running Stonebranch SAP Connector USAP with sap connection from controller\n        logging.info(\"Using Application server connection \")\n        if hol_calid.strip() == \"\":\n            logging.debug(\"No holiday calendar provided \")\n        else:\n            logging.debug(\"holiday calendar provided\")\n            cmd_hol_cal = f\"\"\"usap -ashost ${ops_var_ashost} -client ${ops_var_client} -sysnr ${ops_var_sysnr} -userid ${_credentialUser(\"${ops_var_sapcred}\")} -pwd ${_credentialPwd(\"${ops_var_sapcred}\")} -level ${ops_var_level} -saplang ${ops_var_lang} -D calendars -calendartype hol -calendarid {hol_calid} -details yes\"\"\"\n            try:\n                process_output = subprocess.check_output(cmd_hol_cal, shell=True)\n            except subprocess.CalledProcessError as e:\n                print(e.output)\n                logging.error(\"Error Code: \" + str(e.returncode))\n                exit(1)\n            formatted_output_sap_hol_cal = process_output.decode(encoding='utf-8', errors='ignore')\n        cmd_fact_cal = f\"\"\"usap -ashost ${ops_var_ashost} -client ${ops_var_client} -sysnr ${ops_var_sysnr} -userid ${_credentialUser(\"${ops_var_sapcred}\")} -pwd ${_credentialPwd(\"${ops_var_sapcred}\")} -level ${ops_var_level} -saplang ${ops_var_lang} -D calendars -calendartype fact -calendarid {fact_calid} -details yes\"\"\"\n        try:\n            process_output = subprocess.check_output(cmd_fact_cal, shell=True)\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n        formatted_output_sap_fact_cal = process_output.decode(encoding='utf-8', errors='ignore')\n\n    logging.info(\"Export Process from SAP finished \")\n    return formatted_output_sap_fact_cal, formatted_output_sap_hol_cal\n\n\ndef read_csv():\n    logging.debug(r\"in read_csv\")\n    fieldnames = ['ID', 'HO']\n    reader = csv.DictReader(open(r\"${_scriptPath('${ops_var_script}')}\"), delimiter = ',', fieldnames = fieldnames)\n    ## skip first row\n    next(reader)\n    line_count = 0\n    for row in reader:\n        fact_calid = row[\"ID\"] if row[\"ID\"] else \"\"\n        hol_calid = row[\"HO\"] if row[\"HO\"] else \"\"\n        logging.info(\"Processing Factory Calendar ID {} and holiday calendar ID {} \".format(fact_calid, hol_calid))\n        output_sap_fact_cal, output_sap_hol_cal = export_calendar(fact_calid, hol_calid)\n        import_cal_and_custom_loop(fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal)\n        line_count += 1\n    logging.info(\"{} Calendar have been imported from SAP\".format(line_count))\n\n\ndef print_all_calendar_to_stdout():\n    logging.debug(r\"in import_all_calendar\")\n    # extract all calendars without details from sap and convert it into a python dict\n    # than extract for each calendar the factory and holiday calendar details\n\n    if gl_connection_type == \"dest\":\n        # running Stonebranch SAP Connector USAP with sap connection from controller\n        logging.info(\"using destination server connection \")\n        try:\n            process = subprocess.check_output(\n                ['usap', '-dest', '${ops_var_dest}', '-client',\n                 '${ops_var_client}', '-userid',\n                 '${_credentialUser(\"${ops_var_sapcred}\")}',\n                 '-pwd', '${_credentialPwd(\"${ops_var_sapcred}\")}',\n                 '-level', '${ops_var_level}', '-lang', 'english',\n                 '-D', 'calendars', '-calendartype', 'fact',\n                 '-calendarid', '%', '-details', 'no'])\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n    else:\n        #  running Stonebranch SAP Connector USAP with destination connection with sapnwrfc.ini\n        logging.info(\"using application server connection \")\n        try:\n            process = subprocess.check_output(\n                ['usap', '-ashost', '${ops_var_ashost}', '-client',\n                 '${ops_var_client}', '-sysnr', '${ops_var_sysnr}',\n                 '-userid', '${_credentialUser(\"${ops_var_sapcred}\")}', '-pwd',\n                 '${_credentialPwd(\"${ops_var_sapcred}\")}', '-level',\n                 '${ops_var_level}', '-lang', 'english', '-D',\n                 'calendars', '-calendartype', 'fact',\n                 '-calendarid', '%', '-details', 'no'])\n            logging.debug(f\"command: {process}\")\n        except subprocess.CalledProcessError as e:\n            print(e.output)\n            logging.error(\"Error Code: \" + str(e.returncode))\n            exit(1)\n    out = process.decode(encoding='utf-8', errors='ignore')\n    print(\"############ all calendar start ###############\")\n    print(out)\n    print(\"############ all calendar end #################\")\n\n\ndef import_cal_and_custom_loop(fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal):\n    cal_name = \"${ops_var_sid}_${ops_var_client}_%s\" % (fact_calid)\n    delete_calendar_call(cal_name)\n\n    bus_description = \"\"\n    for str_row_bus in output_sap_fact_cal.split(\"\\n\"):\n        #logging.debug('xx2 row: %s' % str(row))\n        # str_row_bus = str(row.decode(encoding='unicode_escape', errors='ignore'))\n        if \"|\" + str(fact_calid) + \"|\" in str_row_bus and\\\n                (str_row_bus.count('|') == 22 and\n                 \"DESCR\" not in str_row_bus):\n            #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'\n            # % (str_row.count('|'), str_row))\n            bus_description = str_row_bus.split('|')[21].strip()\n            logging.debug('bus_description: %s' % bus_description)\n            break\n\n    cal_str = '{\"businessDays\": {\"useDefaultIfBlank\": false}, ' \\\n              '\"comments\": \"%s\", \"name\": \"%s\", \"customDays\": [], ' \\\n              '\"firstDayOfWeek\": \"%s\", ' \\\n              '\"retainSysIds\": false}' % (bus_description, cal_name, gl_first_day_of_week)\n    json_payload_cal = json.loads(cal_str)\n\n    if hol_calid.strip():\n        for i in range(${ops_var_years}):\n            create_cal_and_custom(json_payload_cal,\n                                  fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal, ${ops_var_start_year} + i)\n\n    logging.debug(json.dumps(json_payload_cal))\n    create_calendar_call(json_payload_cal)\n\n\ndef create_cal_and_custom(json_payload_cal, fact_calid, hol_calid, output_sap_fact_cal, output_sap_hol_cal, year):\n    logging.info('Create Calendar and Custom Day: fact<%s> hol<%s>' %\n                 (fact_calid, hol_calid))\n    hdescription = \"\"\n    for str_row in output_sap_hol_cal.split(\"\\n\"):\n        # logging.debug('xx11 row: %s' % str(row))\n        # str_row = str(row.decode(encoding='unicode_escape', errors='ignore'))\n        if \"|\" + str(hol_calid) + \"|\" in str_row and\\\n                (str_row.count('|') == 6 and\n                 \"DESCR\" not in str_row):\n            #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'\n            # % (str_row.count('|'), str_row))\n            hdescription = str_row.split('|')[5].strip()\n            logging.debug('hdescription: %s' % hdescription)\n            break\n\n    custom_hol_name = \"CustomDays%sHoliday${ops_var_sid}_${ops_var_client}_%s\" % (year, hol_calid)\n    custom_hol_str = '{\"comments\": \"%s\", \"ctype\": \"List of Dates\", \"category\": \"Holiday\", \"dateList\": [], \"name\": \"%s\", \"retainSysIds\": false}' % (hdescription, custom_hol_name)\n    json_payload_custom_hol = json.loads(custom_hol_str)\n\n    holiday_found = False\n    for str_row in output_sap_hol_cal.split(\"\\n\"):\n        # logging.debug('xx12 row: %s' % str(row))\n        if \"|\" + str(year) + \"|\" in str_row and (str_row.count('|') == 19):\n            #logging.debug('NUMBER OF PIPES1:%d xxx row: %s' %\n            # (str_row.count('|'), str_row))\n            fields = str_row.split('|')\n            i = 3\n            while i < 15:\n                for day in range(31):\n                    if fields[i][day] == \"0\":\n                        custom_hol_date = '{}-{:0>2}-{:0>2}'.format(\n                            str(year), str(i-2), str(day+1))\n                        logging.debug('HOL_DATE: ' + custom_hol_date)\n                        json_payload_custom_hol[\"dateList\"].append(custom_hol_date)\n                        holiday_found = True\n                i+=1\n            break\n    if holiday_found is True:\n        delete_custom_call(custom_hol_name)\n        logging.debug(json.dumps(json_payload_custom_hol))\n        create_custom_call(json_payload_custom_hol)\n\n    bus_description = \"\"\n    for str_row_bus in output_sap_fact_cal.split(\"\\n\"):\n        # logging.debug('xx23 row: %s' % str(row))\n        if \"|\" + str(fact_calid) + \"|\" in str_row_bus and (str_row_bus.count('|') == 22 and \"DESCR\" not in str_row_bus):\n            #logging.debug('NUMBER OF PIPES2:%d xxx row: %s' % (str_row.count('|'), str_row))\n            bus_description = str_row_bus.split('|')[21].strip()\n            logging.debug('bus_description: %s' % bus_description)\n            break\n\n    custom_bus_name = \"CustomDays%sBusinessday${ops_var_sid}_${ops_var_client}_%s\" % (year, fact_calid)\n    custom_bus_str = '{\"comments\": \"%s\", \"ctype\": \"List of Dates\", \"category\": \"Business Day\", \"dateList\": [], \"name\": \"%s\", \"retainSysIds\": false}' % (bus_description, custom_bus_name)\n    json_payload_custom_bus = json.loads(custom_bus_str)\n\n    business_day_found = False\n    for str_row_bus in output_sap_fact_cal.split(\"\\n\"):\n        # logging.debug('xx24 row: %s' % str(row))\n        if \"|\" + str(year) + \"|\" in str_row_bus and (str_row_bus.count('|') == 19):\n            #logging.debug('NUMBER OF PIPES2:%d xxx row: %s'\n            # % (str_row.count('|'), str_row))\n            fields = str_row_bus.split('|')\n            i = 3\n            while i < 15:\n                for day in range(31):\n                    if fields[i][day] == \"1\":\n                        custom_bus_date = '{}-{:0>2}-{:0>2}'.format(str(year), str(i-2), str(day+1))\n                        logging.debug('BUS_DATE: ' + custom_bus_date)\n                        json_payload_custom_bus[\"dateList\"].append(custom_bus_date)\n                        business_day_found = True\n                i+=1\n            break\n\n    if business_day_found is True:\n        delete_custom_call(custom_bus_name)\n        logging.debug(json.dumps(json_payload_custom_bus))\n        create_custom_call(json_payload_custom_bus)\n\n    if business_day_found is True:\n        json_payload_cal[\"customDays\"].append({\"name\": '%s'% custom_bus_name})\n    if holiday_found is True:\n        json_payload_cal[\"customDays\"].append({\"name\": '%s'% custom_hol_name})\n\n\ndef create_custom_call(params):\n    url = '%s/resources/customday' % base_url\n    logging.info('Create Custom Day URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.post(url,\n                             headers=local_headers,\n                             data=json.dumps(params),\n                             auth=authentication,\n                             stream=True)\n\n    if 200 != response.status_code:\n        logging.debug('Response: %s' % response.text)\n        if \"duplicate\" in response.text:\n            logging.debug('This was added before, updating...')\n            sysId = read_custom_call(params[\"name\"])\n            params[\"sysId\"] = sysId\n            update_custom_call(params)\n        else:\n            exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef update_custom_call(params):\n    url = '%s/resources/customday' % base_url\n    logging.info('Update Custom Day URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    #logging.info(json.dumps(params))\n    response = requests.put(url,\n                            headers=local_headers,\n                            data=json.dumps(params),\n                            auth=authentication,\n                            stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        if \"duplicate\" in response.text:\n            logging.debug('This was updated before, passing...')\n        else:\n            exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef create_calendar_call(params):\n    url = '%s/resources/calendar' % base_url\n    logging.info('Create Calendar URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.post(url,\n                             headers=local_headers,\n                             data=json.dumps(params),\n                             auth=authentication,\n                             stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        if \"duplicate\" in response.text:\n            logging.debug('This was added before, updating...')\n            # for custom_day in params[\"customDays\"]:\n            #    add_custom_to_calendar_call(params[\"name\"], custom_day[\"name\"])\n            sys_id = read_calendar_call(params[\"name\"])\n            params[\"sysId\"] = sys_id\n            update_calendar_call(params)\n        else:\n            exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef update_calendar_call(params):\n    url = '%s/resources/calendar' % base_url\n    logging.info('Update Calendar URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.put(url,\n                            headers=local_headers,\n                            data=json.dumps(params),\n                            auth=authentication,\n                            stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        if \"duplicate\" in response.text:\n            logging.debug('This was added before, updating...')\n            for custom_day in params[\"customDays\"]:\n                add_custom_to_calendar_call(params[\"name\"], custom_day[\"name\"])\n        else:\n            exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef read_calendar_call(calendar_name):\n    url = '%s/resources/calendar?calendarname=%s' % (base_url, calendar_name)\n    logging.info('Read Calendar URL: %s' % url)\n    local_headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    sys_id = \"\"\n\n    response = requests.get(url,\n                            headers=local_headers,\n                            auth=authentication,\n                            stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        #exit(1)\n    else:\n        logging.debug('Response 200 received')\n        try:\n            sys_id = response.json()[\"sysId\"]\n        except ValueError as e:\n            logging.error(\"JSON parsing sysId, %s\" % response.text)\n            exit(1)\n\n    return sys_id\n\n\ndef delete_calendar_call(cal_name):\n    url = '%s/resources/calendar?calendarname=%s' % (base_url, cal_name)\n    logging.info('Delete Calendar URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.delete(url,\n                               headers=local_headers,\n                               auth=authentication,\n                               stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        #exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef delete_custom_call(custom_name):\n    url = '%s/resources/customday?customdayname=%s' % (base_url, custom_name)\n    logging.info('Delete Custom Day URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.delete(url,\n                               headers=local_headers,\n                               auth=authentication,\n                               stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        #exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\ndef read_custom_call(custom_name):\n    url = '%s/resources/customday?customdayname=%s' % (base_url, custom_name)\n    logging.info('Read Custom Day URL: %s' % url)\n    local_headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    sys_id = \"\"\n\n    response = requests.get(url,\n                            headers=local_headers,\n                            auth=authentication,\n                            stream=True)\n\n    if 200 != response.status_code:\n        logging.info('Response: %s' % response.text)\n        #exit(1)\n    else:\n        logging.debug('Response 200 received')\n        try:\n            sys_id = response.json()[\"sysId\"]\n        except ValueError as e:\n            logging.error(\"JSON parsing sysId, %s\" % response.text)\n            exit(1)\n\n    return sys_id\n\n\ndef add_custom_to_calendar_call(cal_name, custom_name):\n    url = '%s/resources/calendar/customdays?calendarname=%s&customdayname=%s' % (base_url, cal_name, custom_name)\n    logging.info('Add Custom Day to Calendar URL: %s' % url)\n    local_headers = {'content-type': 'application/json'}\n\n    response = requests.post(url,\n                             headers=local_headers,\n                             auth=authentication,\n                             stream=True)\n\n    if 200 != response.status_code:\n        logging.error('Response: %s' % response.text)\n        exit(1)\n    else:\n        logging.debug('Response 200 received')\n\n\n### Main\n# -- Execute\nmain()\n",
    "sysId": "67bf98ec7eef452f8d6e132fd5f222d6",
    "useCommonScript": false,
    "variablePrefix": "var",
    "waitForOutput": false
}